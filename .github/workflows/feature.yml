name: notes-app-ci

on:
  push:
    branches:
      - feature-*

jobs:
  if_merged: 
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'dev' || github.event.pull_request.base.ref == 'stage' || github.event.pull_request.base.ref == 'main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: |
          echo The PR was merged to ${{ github.event.pull_request.base.ref }}

  npm-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine env
        id: determine_env
        run: echo "PROFILE=$(echo $GITHUB_REF | cut -d'/' -f3)" >> $GITHUB_ENV

      - name: makedire
        run: |
          mkdir check || true
          touch check/text.txt || true

      - name: Build Android app
        run: echo "${{ env.PROFILE }}" >> check/text.txt

      - name: upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
           name: report
           path: ./check
           retention-days: 1

      - name: Upload and notify on Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          DIRECTORY_TO_UPLOAD="check"
          TRANSFER_SH_URL="https://transfer.sh"
          TEMP_ZIP_FILE="report.zip"

          # Check if the directory exists
          if [ ! -d "$DIRECTORY_TO_UPLOAD" ]; then
            echo "Directory $DIRECTORY_TO_UPLOAD does not exist."
            exit 1
          fi

          # Compress the directory into a zip file
          zip -r $TEMP_ZIP_FILE $DIRECTORY_TO_UPLOAD

          # Upload the zip file to transfer.sh
          UPLOAD_URL=$(curl --upload-file ./$TEMP_ZIP_FILE $TRANSFER_SH_URL/$TEMP_ZIP_FILE)

          # Check if the upload was successful
          if [[ $UPLOAD_URL == *"transfer.sh"* ]]; then
            echo "Upload successful: $UPLOAD_URL"
          else
            echo "Upload failed."
            exit 1
          fi

          # Create the Slack message payload
          SLACK_MESSAGE_PAYLOAD=$(cat <<EOF
          {
            "text": "New report uploaded: <$UPLOAD_URL|Download Report>"
          }
          EOF
          )

          # Post the message to Slack
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE_PAYLOAD" $SLACK_WEBHOOK_URL

          # Clean up the temporary zip file
          rm $TEMP_ZIP_FILE

          echo "Report uploaded and message posted to Slack."

      # - name: Upload to slack step
      #   uses: adrey/slack-file-upload-action@1.0.5
      #   with:
      #       token: "9etLDFqvs6cBkk8hms291TLD"
      #       path: ./check/text.txt
      #       channel: prs

      # - name: Notify Slack
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: custom
      #     fields: job,repo,commit,author,took
      #     custom_payload: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*Build Report*\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\n*Artifact:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download Report>"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with: 
  #         node-version: "14.x" # Use appropriate Node.js version here

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run tests
  #       run: npm test

  #     - name: Run build
  #       run: npm run build --if-present

  # docker-build:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && github.event.pull_request.merged == true && contains(join(needs.*.result, ','), 'success') && (github.event.pull_request.base.ref == 'dev' || github.event.pull_request.base.ref == 'stage' || github.event.pull_request.base.ref == 'main') }}
  #   needs: [if_merged]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: sivatheja2013/github-notes-app
  #         tags: |
  #           type=ref,event=pr
  #           type=ref,ref=${{ github.ref }}
  #           type=sha,ref=${{ github.sha }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
