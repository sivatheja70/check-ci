name: testing

on:
  push:
    branches:
      - feature-*

jobs:
  if_merged:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'dev' || github.event.pull_request.base.ref == 'stage' || github.event.pull_request.base.ref == 'main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: |
          echo The PR was merged to ${{ github.event.pull_request.base.ref }}

  npm-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Install GitHub CLI
      #   run: |
      #     sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
      #     sudo apt-add-repository https://cli.github.com/packages
      #     sudo apt-get update
      #     sudo apt-get install gh -y

      - name: Determine env
        id: determine_env
        run: echo "PROFILE=$(echo $GITHUB_REF | cut -d'/' -f3)" >> $GITHUB_ENV

      - name: Create directory
        run: |
          mkdir -p check
          touch check/text.txt

      - name: Build Android app
        run: echo "${{ env.PROFILE }}" >> check/text.txt

      - name: Upload artifact
        id: artifact-upload-step
        if: always()
        uses: actions/upload-artifact@v4
        with:
           name: report
           path: ./check
           retention-days: 1

      #    - uses: actions/upload-artifact@v4
      # id: artifact-upload-step
      # with:
      #   name: my-artifact
      #   path: path/to/artifact/content/

      - name: Output artifact ID
        run:  echo "ARTIFACT_URL=${{ steps.artifact-upload-step.outputs.artifact-url }}" >> $GITHUB_ENV

      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
            curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Reports URL: $ARTIFACT_URL\"}" $SLACK_WEBHOOK_URL

      # - name: Set ENV variables
      #   run: |
      #     echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
      #     echo "RUN_ID=${GITHUB_RUN_ID}" >> $GITHUB_ENV
      #     echo "ARTIFACT_NAME=test-artifact" >> $GITHUB_ENV

      # - name: Get artifact URL
      #   id: get_artifact_url
      #   run: |
      #     ARTIFACT_ID=$(curl -s \
      #       -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts" \
      #       | jq -r '.artifacts[] | select(.name=="test-artifact") | .id')
      #     echo "ARTIFACT_URL=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts/${ARTIFACT_ID}"

      # - name: Set up environment variables
      #   run: |
      #     echo "DIRECTORY_TO_UPLOAD=check" >> $GITHUB_ENV
      #     echo "TRANSFER_SH_URL=https://transfer.sh" >> $GITHUB_ENV
      #     echo "TEMP_ZIP_FILE=report.zip" >> $GITHUB_ENV

      # - name: Check if directory exists
      #   run: |
      #     if [ ! -d "$DIRECTORY_TO_UPLOAD" ]; then
      #       echo "Directory $DIRECTORY_TO_UPLOAD does not exist."
      #       exit 1
      #     fi

      # - name: Compress the directory into a zip file
      #   run: zip -r $TEMP_ZIP_FILE $DIRECTORY_TO_UPLOAD

      # - name: Upload the zip file to transfer.sh
      #   id: upload
      #   run: |
      #     UPLOAD_URL=$(curl --upload-file ./$TEMP_ZIP_FILE $TRANSFER_SH_URL/$TEMP_ZIP_FILE)
      #     echo "::set-output name=url::$UPLOAD_URL"

      # - name: Check if upload was successful
      #   run: |
      #     if [[ ${{ steps.upload.outputs.url }} == *"transfer.sh"* ]]; then
      #       echo "Upload successful: ${{ steps.upload.outputs.url }}"
      #     else
      #       echo "Upload failed."
      #       exit 1
      #     fi

    #   - name: Create and post Slack message
    #     run: |
    #       SLACK_MESSAGE_PAYLOAD=$(cat <<EOF
    #       {
    #         "text": "New report uploaded: <${{ steps.upload.outputs.url }}|Download Report>"
    #       }
    #       EOF
    #       )
    #       curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE_PAYLOAD" $SLACK_WEBHOOK_URL

    #   - name: Clean up temporary zip file
    #     run: rm $TEMP_ZIP_FILE

    # env:
    #   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


      # - name: Upload to slack step
      #   uses: adrey/slack-file-upload-action@1.0.5
      #   with:
      #       token: "9etLDFqvs6cBkk8hms291TLD"
      #       path: ./check/text.txt
      #       channel: prs

      # - name: Notify Slack
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: custom
      #     fields: job,repo,commit,author,took
      #     custom_payload: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*Build Report*\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\n*Artifact:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download Report>"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with: 
  #         node-version: "14.x" # Use appropriate Node.js version here

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run tests
  #       run: npm test

  #     - name: Run build
  #       run: npm run build --if-present

  # docker-build:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && github.event.pull_request.merged == true && contains(join(needs.*.result, ','), 'success') && (github.event.pull_request.base.ref == 'dev' || github.event.pull_request.base.ref == 'stage' || github.event.pull_request.base.ref == 'main') }}
  #   needs: [if_merged]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: sivatheja2013/github-notes-app
  #         tags: |
  #           type=ref,event=pr
  #           type=ref,ref=${{ github.ref }}
  #           type=sha,ref=${{ github.sha }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
